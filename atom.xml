<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[後輩に贈るブログ]]></title>
  <link href="http://k-komori-protech.github.io/atom.xml" rel="self"/>
  <link href="http://k-komori-protech.github.io/"/>
  <updated>2014-01-25T01:50:12+09:00</updated>
  <id>http://k-komori-protech.github.io/</id>
  <author>
    <name><![CDATA[先輩]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Virtualenvを使ってみる]]></title>
    <link href="http://k-komori-protech.github.io/blog/2014/01/24/introduction-to-virtualenv/"/>
    <updated>2014-01-24T23:53:01+09:00</updated>
    <id>http://k-komori-protech.github.io/blog/2014/01/24/introduction-to-virtualenv</id>
    <content type="html"><![CDATA[<p>Pythonで開発してる中で外部のライブラリを使うってのはよくある話です。</p>

<p>ライブラリのインストールは1コマンドでできるぐらい簡単ではあるんですが、
普通にインストールしてしまうとシステムのPython環境にインストールされていまいます。
例えば、/usr/lib/python2.7/site-packagesなどです。</p>

<p>ここで問題になるのは、こうしてしまうとライブラリのバージョンが固定されてしまうことです。
複数のアプリから同じライブラリを使用していても依存してるバージョンが異なってるというケースもありますし、
テストなどで一時的にインストールしたアプリの依存しているライブラリがシステムに入っているバージョンと異なっているようなケースもあるでしょう。
システムにインストールしているPython環境を汚してしまうという点も何か嫌ですね。</p>

<p>こういう時どうしましょうか？想像できるのはPythonを丸ごとコピーしてそれぞれに別バージョンのライブラリをインストールする。
これを簡単に行うツールが「virtualenv」です。</p>

<h2>virtualenvをセットアップしよう</h2>

<p>まず以下からソースコードを落としてきます。
virtualenv-1.11.1.tar.gzというのがそうです。</p>

<p><a href="https://pypi.python.org/pypi/virtualenv">https://pypi.python.org/pypi/virtualenv</a></p>

<p>ダウンロードが終わったら展開して、作成されたディレクトリに移動しましょう。
そして、setup.pyを実行します。以下のような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>tar xzvf virtualenv-1.11.1.tar.gz
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>virtualenv-1.11.1
</span><span class='line'><span class="nv">$ </span>python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>これでインストールは終わりです。
ちなみにeasy_installというコマンドでもインストールできますが諸事情により今回は使いませんでした。</p>

<h2>virtualenv環境を構築する</h2>

<p>以下のようにして作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>virtualenv ~/testenv
</span><span class='line'>New python executable in /home/k2/testenv/bin/python2.7
</span><span class='line'>Also creating executable in /home/k2/testenv/bin/python
</span><span class='line'>Installing setuptools, pip...done.
</span></code></pre></td></tr></table></div></figure>


<p>~/testenvにvirtualenv環境ができました。
簡単ですね。</p>

<h2>virtualenv環境に入る</h2>

<p>virtualenv環境の下のbin/activateを読み込むと入れます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/testenv/bin/activate
</span><span class='line'><span class="o">(</span>testenv<span class="o">)</span> <span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>プロンプトのところが変わったのに気付きましたか？
この状態でpythonを実行した時に起動するのは~/testenvの中のpythonになります。
which pythonをしてみれば明らかです。</p>

<h2>この後どうする？</h2>

<p>この状態でライブラリをインストールすると~/testenvの下にインストールされます。
システムにインストールされているPythonの環境は汚れないわけですね。
使い終わったら~/testenvをただ消してしまえばOKです。
エコですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonでSQLite3を操作する方法]]></title>
    <link href="http://k-komori-protech.github.io/blog/2014/01/23/howto-sqlite3-in-python/"/>
    <updated>2014-01-23T22:44:41+09:00</updated>
    <id>http://k-komori-protech.github.io/blog/2014/01/23/howto-sqlite3-in-python</id>
    <content type="html"><![CDATA[<h2>SQLiteとは？</h2>

<p>SQLiteは軽量でサーバーを必要としないデータベースエンジンです。</p>

<p><a href="http://sqlite.org/">http://sqlite.org/</a></p>

<p>Python 2.5から標準ライブラリとしてsqlite3モジュールが入っていますので、それを使用してアクセスします。
もし入っていない場合は自分でビルドして利用することもできますが、やり方については割愛します。</p>

<h2>データベースファイルを用意しよう</h2>

<p>元々のSQLiteにはSQLを実行するためのツールが付属していてそれを使うことが多いんですが、
今回は全部Pythonからやることにします。</p>

<ol>
<li>まずモジュールをインポート</li>
<li>データベースへ接続</li>
<li>SQLを実行するためのカーソルを取得</li>
<li>SQLを実行</li>
<li>使い終わったカーソルを開放</li>
<li>接続を閉じる</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sqlite3</span> <span class="c"># (1)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&#39;./hoge.db&#39;</span><span class="p">)</span> <span class="c"># (2)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span> <span class="c"># (3)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;CREATE TABLE books (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, author TEXT);&#39;</span><span class="p">)</span> <span class="c"># (4)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">Cursor</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffec02a0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="c"># (5)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span> <span class="c"># (6)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでhoge.dbというデータベースファイルができて、さらにbooksというテーブルが作られました。
接続はまだしも、カーソルという聞き慣れない言葉が出てきましたが後で説明するので、
とりあえずSQLを実行するにはカーソルが必要だと思っておいてください。</p>

<p>カーソルのexecute()メソッドでSQLを実行でき、戻り値は呼び出し先と同一のカーソルになります。</p>

<h2>データベースから行を読んでみよう</h2>

<p>またデータベースへ接続し、カーソルを取得しましょう。
そしてSELECT文を実行し、カーソルを介して結果を取得します。
カーソルはイテレータとして扱うことができますのでforでprintしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;SELECT * FROM books;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">Cursor</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffec02a0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>   <span class="k">print</span> <span class="n">row</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>はい、何もprintされません。
まだテーブルに何もデータが入っていないからですね。</p>

<h2>データベースへ行を入れてみよう</h2>

<p>もう大体わかると思いますので、説明は割愛します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO books (name, author) VALUES (&quot;今度、転職します&quot;, &quot;先輩&quot;);&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">Cursor</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffec02a0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;INSERT INTO books (name, author) VALUES (&quot;Yes, we can&quot;, &quot;Obama&quot;);&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">Cursor</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffec02a0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">conn</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>COMMITは接続オブジェクトのcommit()メソッドで行えます。</p>

<h2>もう一回、データベースから行を読んでみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;SELECT * FROM books;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">sqlite3</span><span class="o">.</span><span class="n">Cursor</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffec02a0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>   <span class="k">print</span> <span class="n">row</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">u&#39;</span><span class="se">\u4eca\u5ea6\u3001\u8ee2\u8077\u3057\u307e\u3059</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">u&#39;</span><span class="se">\u5148\u8f29</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">u&#39;Yes, we can&#39;</span><span class="p">,</span> <span class="s">u&#39;Obama&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>表示されましたね！
日本語はうまく表示されてないのはUnicode文字列として読み込まれるためです。
適切に文字コード変換すればちゃんと表示されます。</p>

<h2>終わり</h2>

<p>大体、こんな感じです。
詳しくはドキュメントを見てね。</p>

<p><a href="http://docs.python.jp/2.7/library/sqlite3.html">http://docs.python.jp/2.7/library/sqlite3.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pytzでタイムゾーンを考慮する方法]]></title>
    <link href="http://k-komori-protech.github.io/blog/2014/01/23/howto-pytz/"/>
    <updated>2014-01-23T00:23:10+09:00</updated>
    <id>http://k-komori-protech.github.io/blog/2014/01/23/howto-pytz</id>
    <content type="html"><![CDATA[<p>プログラムから日時を扱う時に注意が必要なのはタイムゾーンです。
地球上の場所によって時間が変わる、いわゆる時差というやつです。</p>

<p><a href="http://ja.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E6%99%82">http://ja.wikipedia.org/wiki/%E6%A8%99%E6%BA%96%E6%99%82</a></p>

<p>Pythonでは日付型は標準でサポートされていて時差の考慮もできるんだけど、タイムゾーン自体の定義がないため自分で書く必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># UTCのタイムゾーンの定義</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UTC</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">tzinfo</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">utcoffset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">dst</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tzname</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;UTC&#39;</span>
</span><span class='line'><span class="c"># JSTのタイムゾーンの定義</span>
</span><span class='line'><span class="k">class</span> <span class="nc">JST</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">tzinfo</span><span class="p">):</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">utcoffset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">dst</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">tzname</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dt</span><span class="p">):</span>
</span><span class='line'>         <span class="k">return</span> <span class="s">&#39;JST&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>タイムゾーンの変換を行うにはdatetimeオブジェクトにタイムゾーンが設定されている必要があります。
普通にdatetimeオブジェクトを作るとタイムゾーンは設定されないです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 10:42:50 &#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>タイムゾーンを指定するには、コンストラクタに渡すか、replace()でtzinfoを設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">JST</span><span class="p">())</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 09:00:00 JST+0900&#39;</span>
</span><span class='line'><span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">JST</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffeb69cc</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">tzinfo</span><span class="o">=</span><span class="n">JST</span><span class="p">())</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 09:00:00 JST+0900&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">JST</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xffeb638c</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>astimezone()で別のタイムゾーンに変換できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">JST</span><span class="p">())</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 09:00:00 JST+0900&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">UTC</span><span class="p">())</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 00:00:00 UTC+0000&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>で、本題です。
毎回タイムゾーンの定義や指定をするのはめんどいなーっと思ってライブラリを探したらありました。</p>

<p><strong>pytz</strong>
<a href="https://pypi.python.org/pypi/pytz">https://pypi.python.org/pypi/pytz</a></p>

<p>UTCのタイムゾーンを取得するには以下のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">pytz</span><span class="o">.</span><span class="n">utc</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">UTC</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSTのタイムゾーンは名前を指定して取得できます。名前はLinuxなどで使われている一般的なやつです。
余談：日本にも複数のタイムゾーンがあるんだね（<a href="http://www.atmarkit.co.jp/fdb/rensai/sqlclinic04/sqlclinic04_3.html%EF%BC%89">http://www.atmarkit.co.jp/fdb/rensai/sqlclinic04/sqlclinic04_3.html%EF%BC%89</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">pytz</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Asia/Tokyo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">DstTzInfo</span> <span class="s">&#39;Asia/Tokyo&#39;</span> <span class="n">CJT</span><span class="o">+</span><span class="mi">9</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="n">STD</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>astimezone()を使用して変換をしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2013</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">pytz</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Asia/Tokyo&#39;</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 09:00:00 CJT+0900&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">pytz</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;2013-04-12 00:00:00 UTC+0000&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>他、サマータイムやdaylight savings time（DST、初めて知った）を考慮する関数もあるみたいですが、日本では関係ないので割愛します。</p>
]]></content>
  </entry>
  
</feed>
